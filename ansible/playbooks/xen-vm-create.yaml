---
# playbooks/xen-vm-create.yaml
# Create Xen VMs from existing templates
# Customize bootstrap with playbook includes for "k8s", "nfs" (WIP), ...

- hosts: local
  vars:
    sr_name: ""
    vm_template: "ubuntu-22.04-base"
    vm_name: ""
    vm_class: ""
    #vm_data: ""
    #vm_erase_data: ""
    bridge_name: ""
    mac: ""
    memory: ""
    vm_created: false
    vcpu_count: 2
    iso_name: ""

  tasks:
    - name: Get UUID of share SR
      command: xe sr-list name-label="{{ sr_name }}" --minimal
      register: sruuid

    - name: debug output
      debug:
        msg: "SR UUID {{ sruuid }}.stdout"

    - name: Get the UUID of the VM template
      command: xe template-list name-label="{{ vm_template }}" --minimal
      register: templateuuid

    - name: debug output
      debug:
        msg: "{{ templateuuid }}.stdout"

    - name: Get the UUID of the network
      command: xe network-list bridge="{{ bridge_name }}" --minimal
      register: networkuuid

    - name: Check if VM exists
      command: xe vm-list name-label="{{ vm_name }}"
      register: vmuuid_existing

    - name: "Set variables"
      set_fact:
        vm_created: true
      when: vmuuid_existing.stdout != ""

    - name: Deploy new VM
      command: xe vm-install template={{ templateuuid.stdout }} new-name-label="{{ vm_name }}" sr-uuid={{ sruuid.stdout }}
      register: vmuuid
      when: vm_created == false

    - name: Set memory
      command: xe vm-memory-limits-set uuid={{ vmuuid.stdout }} dynamic-min="{{ memory }}" dynamic-max="{{ memory }}" static-max="{{ memory }}" static-min="{{ memory }}"

    - name: Set vcpu count max
      command: xe vm-param-set VCPUs-max={{ vcpu_count }} uuid={{ vmuuid.stdout }}
      when: vm_created == false

    - name: Set vcpu count at startup
      command: xe vm-param-set VCPUs-at-startup={{ vcpu_count }} uuid={{ vmuuid.stdout }}
      when: vm_created == false

    - name: Get the UUID of the attached network
      command: xe vm-vif-list name-label="{{ vm_name }}" --minimal
      register: vif_uuid
      when: vm_created == false

    - name: "Set variables"
      set_fact:
        mac: random
      when: mac == ""

    - debug:
        var: mac

    - name: Delete existing VIF
      command: xe vif-destroy vm-uuid={{ vmuuid.stdout }} uuid={{ vif_uuid.stdout }}  device=0
      when: vm_created == false and vif_uuid != false

    - name: Attach VM to network
      command: xe vif-create vm-uuid={{ vmuuid.stdout }} network-uuid={{ networkuuid.stdout }} mac={{ mac }} device=0
      when: vm_created == false

    - name: Get the UUID of the system disk
      command: xe vm-disk-list vbd-params=device=xvda uuid={{ vmuuid.stdout }} --minimal
      register: vdiuuid
      when: vm_created == false

    - name: Check if persistent data disk already exists
      command: xe vdi-list name-label={{ vm_name }}-data --minimal
      register: vdi_data_uuid
      when: ( vm_data != false ) and ( vm_created == false )

    - debug:
        var: vdi_data_uuid
      when: ( vm_data != false ) and ( vm_created == false )

    - debug:
        msg: VDI UUID {{ vdi_data_uuid.stdout }} VM UUID {{ vmuuid.stdout }}
      when: ( vm_data == true) and ( vm_created == false )

    - name: Create persistent data disk
      command: xe vdi-create sr-uuid={{ sruuid.stdout }} name-label={{ vm_name }}-data virtual-size={{ vm_data }}GiB 
      when: (vm_data != false ) and ( vm_created == false ) and ( not vdi_data_uuid.stdout )

    - name: Get new persistent data disk vdi-uuid
      command: xe vdi-list name-label={{ vm_name }}-data --minimal
      register: vdi_data_uuid
      when: (vm_data != false ) and ( vm_created == false )

    - name: Register persistent data disk with VM
      command: "xe vbd-create vm-uuid={{ vmuuid.stdout }} vdi-uuid={{ vdi_data_uuid.stdout }} device=1 bootable=false mode=RW type=Disk"
      register: vbduuid
      when: ( vm_data != false ) and ( vm_created == false ) and ( vdi_data_uuid.stdout != "" )

    - name: Create and attach CDROM drive
      command: xe vm-cd-add vm={{ vm_name }} cd-name={{ iso_name }} device=3
      when: vm_created == false

    - name: Boot VM and start preseed installation
      command: xe vm-start uuid={{ vmuuid.stdout }}

    #- name: Attach persistent data disk to VM
    #  command: xe vbd-plug uuid={{ vbduuid.stdout }} 
    #  when: vm_data and ( vm_created == false )

    - name: Get the boot time for the VM
      command: xe vm-param-get param-name=start-time  uuid={{ vmuuid.stdout }}
      register: boottime

    - name: Get VM IP for Ansible
      command: |
        xe vm-list name-label="{{ vm_name }}" params=networks --minimal
      retries: 30
      delay: 5
      register: vm_ip_raw
      until: vm_ip_raw.stdout.find("ip:") != -1

    - name: Parse VM IP
      set_fact:
        vm_ip: "{{ vm_ip_raw | regex_search('ip: ([0-9]+.[0-9]+.[0-9]+.[0-9]+)', '\\1') }}"

    - debug:
        var: vm_ip

    - name: Add host to runtime inventory
      add_host:
        name="{{ item }}"
        groups="deployed_vms"
      with_items: "{{ vm_ip }}"

- hosts: deployed_vms
  vars:
    ansible_user: vagrant

  pre_tasks:

    - name: set hostname
      command: "hostnamectl set-hostname {{ vm_name }}"
      become: true

    - name: Mount xentools CD
      command: mount /dev/sr0 /mnt
      become: true

    - name: Run the xentools installer
      command: /mnt/Linux/install.sh -n
      become: true

    - name: Unmount the xentools CD
      command: umount /mnt
      become: true

    - name: Reboot VM
      reboot:
        reboot_timeout: 3600
      become: true

- name: Post-reboot activities
  hosts: local

  tasks:
    - name: Eject the xentools CD
      command: xe vm-cd-eject vm={{ vmuuid.stdout }}

    - name: Get VM IP for Ansible
      command: |
        xe vm-list name-label="{{ vm_name }}" params=networks --minimal
      retries: 30
      delay: 5
      register: vm_ip_raw
      until: vm_ip_raw.stdout.find("ip:") != -1

    - name: Parse VM IP
      set_fact:
        vm_ip: "{{ vm_ip_raw | regex_search('ip: ([0-9]+.[0-9]+.[0-9]+.[0-9]+)', '\\1') }}"

    - name: Add host to runtime inventory
      add_host:
        name="{{ item }}"
        groups="deployed_vms"
      with_items: "{{ vm_ip }}"

    - name: Add host to runtime inventory k8s-master group
      add_host:
        name="{{ item }}"
        groups="k8s-master_vms"
      with_items: "{{ vm_ip }}"
      when: k8s_master

    - name: Add host to runtime inventory k8s-worker group
      add_host:
        name="{{ item }}"
        groups="k8s-worker_vms"
      with_items: "{{ vm_ip }}"
      when: k8s_worker

- name: Apply VM Base Role to all deployed_vms
  import_playbook: vm-base.yaml

- name: Play for k8s-hosts only
  import_playbook: k8s.yaml
  when: (vm_class == "k8s" )
